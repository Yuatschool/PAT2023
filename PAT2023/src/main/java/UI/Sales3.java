/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;


import Backend.StockManager;
import Backend.CurrentOrderManager;
import Backend.SalesHistoryManager;

import java.awt.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/**
 *
 * @author User-Pc
 */
public class Sales3 extends javax.swing.JFrame {

    /**
     * Creates new form Sales2
     */
    public Sales3() {
        initComponents();
        
        String[] columnNames = {"Item","Type","Price"};
        
       
        String[][] data = StockManager.getStockDataAsTable();
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        menuTable.setModel(model);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane6 = new javax.swing.JScrollPane();
        totalTextArea = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        adddetailsButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        customerTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        quantitySpinner = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        currentorderTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        isCollectedCheckBox1 = new javax.swing.JCheckBox();
        jButton2 = new javax.swing.JButton();
        dateSpinner1 = new javax.swing.JSpinner();
        calculateButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        totalTextArea.setColumns(20);
        totalTextArea.setRows(5);
        jScrollPane6.setViewportView(totalTextArea);

        jLabel4.setText("Current Order");

        deleteButton.setText("Remove item");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("Total");

        adddetailsButton.setText("Add To Order");
        adddetailsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adddetailsButtonActionPerformed(evt);
            }
        });

        menuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Item", "Type", "Price"
            }
        ));
        jScrollPane8.setViewportView(menuTable);

        jLabel5.setText("NAME OF CUSTOMER");

        jLabel2.setText("Menu");

        customerTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Quantity");

        jLabel6.setText("Date");

        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel());

        jButton1.setText("Home");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        currentorderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item", "Type", "Price", "Quantity", "Customer", "Collected or not"
            }
        ));
        jScrollPane1.setViewportView(currentorderTable);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel1.setText("SALES");

        isCollectedCheckBox1.setText("Collected or Not");

        jButton2.setText("SAVE SALE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        dateSpinner1.setModel(new javax.swing.SpinnerDateModel());

        calculateButton3.setText("Calculate");
        calculateButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(331, 331, 331)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(273, 273, 273))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(isCollectedCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(jLabel5)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(adddetailsButton)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addGap(40, 40, 40)))))
                .addGap(24, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(customerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton)
                        .addGap(73, 73, 73))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(calculateButton3))
                        .addGap(14, 14, 14))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(266, 266, 266))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(adddetailsButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteButton)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(customerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(isCollectedCheckBox1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addGap(101, 101, 101)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(calculateButton3)
                                .addGap(26, 26, 26)
                                .addComponent(jButton2))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int rowSelected = currentorderTable.getSelectedRow();
        
        String name = (String) currentorderTable.getValueAt(rowSelected, 0);
        String type = (String) currentorderTable.getValueAt(rowSelected, 1);
        double cost = Double.parseDouble((String) currentorderTable.getValueAt(rowSelected, 2));
        int quantity = Integer.parseInt((String) currentorderTable.getValueAt(rowSelected, 3));
        String customer = (String) currentorderTable.getValueAt(rowSelected, 4);
        String isCollectedString = (String) currentorderTable.getValueAt(rowSelected, 5);
        boolean isCollected = Boolean.parseBoolean(isCollectedString);

        CurrentOrderManager.deleteItem(name, type, cost, quantity, customer, isCollected);

        // Reset the table model with updated data
        String[] columnNames = {"Item", "Type", "Price", "Quantity", "Customer", "isCollected"};
        String[][] data = CurrentOrderManager.getCurrentOrderDataAsTable();
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        currentorderTable.setModel(model);


    }//GEN-LAST:event_deleteButtonActionPerformed

    private void adddetailsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adddetailsButtonActionPerformed
    int rowSelected = menuTable.getSelectedRow();

    String itemName = (String) menuTable.getValueAt(rowSelected, 0);
    String itemType = (String) menuTable.getValueAt(rowSelected, 1);
    String priceString = (String) menuTable.getValueAt(rowSelected, 2);
    double itemPrice = 0.0;
    if (!priceString.isEmpty()) {
        itemPrice = Double.parseDouble(priceString);
    }

    String customerName = customerTextField.getText();
    boolean isCollected = isCollectedCheckBox1.isSelected(); 
    int itemQuantity = (int) quantitySpinner.getValue();

    CurrentOrderManager.addItemToCurrentOrder(itemName, itemType, itemPrice, itemQuantity, customerName, isCollected);

    // Resets the currentorderTable model
    String[] columnNames = {"Item", "Type", "Price", "Quantity", "Customer", "isCollected"};
    String[][] data = CurrentOrderManager.getCurrentOrderDataAsTable();
    DefaultTableModel model = new DefaultTableModel(data, columnNames);
    currentorderTable.setModel(model);

    double itemTotal = 0.0;
    try {
        itemTotal = Double.parseDouble((String) totalTextArea.getText());
    } catch (NumberFormatException e) {
        System.err.println("NumberFormatException: " + e.getMessage());
    }

   
   
    }//GEN-LAST:event_adddetailsButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        dispose();

        //creates a new main menu screen.
        new MainMenu1().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int rowSelected = currentorderTable.getSelectedRow();

if (rowSelected != -1) {
    try {
        String itemName = (String) currentorderTable.getValueAt(rowSelected, 0);

        double itemTotal = 0;
        String totalText = totalTextArea.getText().trim(); // Trim leading and trailing white spaces
        totalText = totalText.replaceAll("[^0-9.]", ""); // Remove non-numeric characters
        if (!totalText.isEmpty()) {
            itemTotal = Double.parseDouble(totalText);
        } else {
            throw new NumberFormatException("Empty or invalid total value");
        }

        boolean isCollected = isCollectedCheckBox1.isSelected();

        String customerName = "";
        if (currentorderTable.getValueAt(rowSelected, 4) != null) {
            customerName = currentorderTable.getValueAt(rowSelected, 4).toString();
        }

        Date salesDate = (Date) dateSpinner1.getValue(); 
        // Converting the Date object to a String in the "yyyy-MM-dd" format
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String salesDateString = dateFormat.format(salesDate);

        // Converting the string back to a Date object
        try {
            Date convertedDate = dateFormat.parse(salesDateString);
            SalesHistoryManager.addItemToSalesHistory(itemTotal, itemName, customerName, convertedDate, isCollected);
            // Display a message confirming the save operation
            System.out.println("Sale data saved successfully.");
        } catch (ParseException ex) {
            System.err.println("Error parsing date: " + ex.getMessage());
            ex.printStackTrace();
        }
    } catch (ArrayIndexOutOfBoundsException e) {
        System.err.println("ArrayIndexOutOfBoundsException: " + e.getMessage());
    } catch (NumberFormatException e) {
        System.err.println("NumberFormatException: " + e.getMessage());
    }
} else {
    System.err.println("No row selected.");
}

    }//GEN-LAST:event_jButton2ActionPerformed

    private void customerTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerTextFieldActionPerformed
        
    }//GEN-LAST:event_customerTextFieldActionPerformed

    private void calculateButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateButton3ActionPerformed
     double total = 0;
int quantity = 0;

// Iterates through all the rows of the table
for (int row = 0; row < currentorderTable.getRowCount(); row++) {
    try {
        double price = Double.parseDouble(currentorderTable.getValueAt(row, 2).toString());
        String quantityValue = currentorderTable.getValueAt(row, 3).toString();

        if (!quantityValue.isEmpty()) {
            quantity = Integer.parseInt(quantityValue);
        }

        double subtotal; // Declare the variable outside the if-else block

        if (quantity == 0) {
            subtotal = price;
            total += subtotal;
        } else {
            subtotal = price * quantity;
            total += subtotal;
        }
    } catch (NumberFormatException e) {
        System.err.println("NumberFormatException: " + e.getMessage());
    }
}

// Setting the total in the JTextArea
totalTextArea.setText("Total: R" + String.valueOf(total));




    }//GEN-LAST:event_calculateButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sales3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sales3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sales3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sales3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Creates and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Sales3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adddetailsButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton calculateButton3;
    private javax.swing.JTable currentorderTable;
    private javax.swing.JTextField customerTextField;
    private javax.swing.JSpinner dateSpinner1;
    private javax.swing.JButton deleteButton;
    private javax.swing.JCheckBox isCollectedCheckBox1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTable menuTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTextArea totalTextArea;
    // End of variables declaration//GEN-END:variables
}
